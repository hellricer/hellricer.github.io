<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>~hellricer/</title>
        <description>— a terminal dweller</description>        
        <link>https://hellricer.github.io</link>
        <atom:link href="https://hellricer.github.io/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Making fzf experience a bit more consistent</title>
                <description>&lt;p&gt;As for increasingly many people, &lt;code&gt;fzf&lt;/code&gt; became deeply ingrained into my workflow. But there are few things that I find a bit odd.&lt;/p&gt;
&lt;p&gt;First, I don&#39;t really see the advantage of having &lt;code&gt;Ctrl-T&lt;/code&gt; mapped to &lt;em&gt;&#34;find files in current directory&#34;&lt;/em&gt;. What I often want is to search only in some subdirectory.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp Music/&amp;lt;Ctrl-T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;doesn&#39;t quite work for me, because the search starts in my home directory. What I have to use is &lt;code&gt;cp Music/**&amp;lt;Tab&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second thing I don&#39;t quite understand is why author needed to treat &lt;code&gt;kill&lt;/code&gt; command differently than all the other ones - while you need to type &lt;code&gt;**&amp;lt;Tab&amp;gt;&lt;/code&gt; for &lt;code&gt;ssh&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt;, the &lt;code&gt;kill&lt;/code&gt; has to be run with &lt;code&gt;kill &amp;lt;Tab&amp;gt;&lt;/code&gt; (and &lt;code&gt;kill **&amp;lt;Tab&amp;gt;&lt;/code&gt; doesn&#39;t work). There&#39;s even &lt;a href=&#34;https://github.com/junegunn/fzf/issues/385&#34;&gt;an issue&lt;/a&gt; about the problem, but</description>
                <pubDate>Thu, 16 Apr 2020 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2020/04/16/a-bit-more-consistent-fzf.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2020/04/16/a-bit-more-consistent-fzf.html</guid>
            </item>
        
            <item>
                <title>URxvt extensions</title>
                <description>&lt;p&gt;URxvt was my &#34;weapon of choice&#34; for many years. For me, it always constituted perfect blend between blazing-fast and feature-full terminal emulator.&lt;/p&gt;
&lt;p&gt;It might seem basic at first, but the powerful &lt;code&gt;urxvtperl(3)&lt;/code&gt; interpreter allows users to extend it with pretty much any feature of other terminal emulators like &lt;code&gt;gnome-terminal&lt;/code&gt; or &lt;code&gt;iTerm2&lt;/code&gt; and more.&lt;/p&gt;
&lt;p&gt;This post contains a curated set of some of these extensions with small description of what they do.&lt;/p&gt;
&lt;h2&gt;Changing colors &amp;amp; font-size on the fly.&lt;/h2&gt;
&lt;p&gt;This is very useful when you&#39;re screen-sharing your hidpi desktop and people complain they can&#39;t read anything, or when logs get too long and you want to see them without line-breaks, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/majutsushi/urxvt-font-size (included in official packages)&lt;/li&gt;
&lt;li&gt;https://github.com/felixr/urxvt-theme-switch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#39;position:relative; padding-bottom:calc(75.00% + 44px)&#39;&gt;&lt;iframe src=&#39;https://gfy</description>
                <pubDate>Thu, 16 Apr 2020 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2020/04/16/2020-03-14-urxvt-extensions.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2020/04/16/2020-03-14-urxvt-extensions.html</guid>
            </item>
        
            <item>
                <title>More ventures into Middle-earth</title>
                <description>&lt;p&gt;TODO: intro&lt;/p&gt;
&lt;h2&gt;Fixing river flows&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&#34;...the world has changed, I can feel it in the water, I can feel it in the earth...&#34;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is my shot at fixing something that&#39;s been bothering me about the rivers layer.&lt;/p&gt;
&lt;p&gt;It&#39;s not uncommon in river datasets that rivers are stored consistently with their stream direction. But it seems that here it&#39;s pretty much random. Some rivers begin at their confluence with another river, some spring in the valley and flow into mountains, etc.&lt;/p&gt;
&lt;p&gt;Another issue is that some lines are over-segmented for no clear reason.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Fig 1.&#34; src=&#34;cartography/rivers-mitheithel.png&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The yellow markers show the startpoints. Red lines are detected as wrongly oriented. Notice that the blue/violet line is one river split into two segments with opposite flow directions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Going by the intuition, it seems that just a handful of rules could fix most of these cases. One suc</description>
                <pubDate>Thu, 16 Apr 2020 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2020/04/16/2019-09-10-more-ventures-into-middle-earth.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2020/04/16/2019-09-10-more-ventures-into-middle-earth.html</guid>
            </item>
        
            <item>
                <title>Test-drive your terminal</title>
                <description>&lt;p&gt;Along with shell, terminal emulator is for many the most important part of operating system.  It&#39;s where you spend most of your time!&lt;/p&gt;
&lt;p&gt;There are tones of them to choose from.  Some prefer them as leightweight as possible, others like them to handle things like tabs, splits, etc.&lt;/p&gt;
&lt;p&gt;But how does your terminal perform at actually displaying stuff?  I wrote this shell script to test how various terminals handle colors, extended text decorations and few other things.&lt;/p&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/hellricer/e514d9615d02838244d8de74d0ab18b3.js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Here&#39;s how decorations look in &lt;code&gt;gnome-terminal&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&#34;https://hellricer.github.io//assets/images/terminal-decorations.jpg&#34;&gt;&lt;img src=&#34;https://hellricer.github.io//assets/images/terminal-decorations.jpg&#34; alt=&#34; Image: &#34; title=&#34;gnome-terminal getting it almost right.&#34; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;gnome-terminal getting it almost right.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Results&lt;/h2&gt;
</description>
                <pubDate>Sat, 05 Oct 2019 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2019/10/05/test-drive-your-terminal.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2019/10/05/test-drive-your-terminal.html</guid>
            </item>
        
            <item>
                <title>Soupmonkey</title>
                <description>&lt;p&gt;&lt;a href=&#34;/2019/05/29/elinks-with-beautifulsoup.html&#34;&gt;In my last blog-post&lt;/a&gt; , I discovered an easy way to manipulate DOM before rendering it in Elinks using BeautifulSoup library.&lt;/p&gt;
&lt;p&gt;I called it DevTools for ELinks, but as one reddit user correctly noted, it&#39;s conceptually more similar to user-scripts.&lt;/p&gt;
&lt;p&gt;That gave me an idea to completely separate rule-files for individual domains in a similar way that Greasemonkey, Tampermonkey and similar user-script managers do.&lt;/p&gt;
&lt;p&gt;So, I introduce &lt;a href=&#34;https://github.com/hellricer/soupmonkey&#34;&gt;soupmonkey!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The usage is simplified as well - all you have to do is clone the repository into your &lt;code&gt;~/.elinks/&lt;/code&gt; folder and decorate the &lt;code&gt;pre_format_html_hook&lt;/code&gt; in the hooks file.  So your &lt;code&gt;~/.elinks/hooks.py&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;hr/&gt;

&lt;pre&gt;&lt;code&gt;import soupmonkey

@soupmonkey.inject
def pre_format_html_hook(url, html):
    return html
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;

&lt;p&gt;And that&#39;s it!&lt;/p&gt;
&lt;p&gt;As of writ</description>
                <pubDate>Fri, 04 Oct 2019 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2019/10/04/modify-dom-in-elinks-with-soupmonkey.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2019/10/04/modify-dom-in-elinks-with-soupmonkey.html</guid>
            </item>
        
            <item>
                <title>ELinks with BeautifulSoup</title>
                <description>&lt;p&gt;For many terminal dwellers like me, browsing the web is one of the last few scenarios where we have to leave our cozy terminals into the harsh cold GUI world. Complexity of today&#39;s websites simply won&#39;t cut it without graphics, preferably with high screen resolution.&lt;/p&gt;
&lt;p&gt;That&#39;s not to say that it&#39;s not worth to experiment with terminal-based browsers, though! Most people probably know about &lt;code&gt;w3m&lt;/code&gt; for its ability to display actual images and &lt;code&gt;lynx&lt;/code&gt; as the oldest one. But in this post, I&#39;d like to talk about &lt;a href=&#34;http://elinks.cz/&#34;&gt;ELinks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&#39;s arguably most feature-packed (read “bloated”) and also most user-friendly of the three. It supports tabs, multiple downloads, bookmarks, it has rudimentary support for CSS and even JavaScript. And, after some tweaking, it can actually look pretty good!&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&#34;https://hellricer.github.io//assets/images/elinks-ddg.png&#34;&gt;&lt;img src=&#34;https://hellricer.github.io//assets/images/elinks-ddg.png&#34; a</description>
                <pubDate>Wed, 29 May 2019 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2019/05/29/elinks-with-beautifulsoup.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2019/05/29/elinks-with-beautifulsoup.html</guid>
            </item>
        
            <item>
                <title>Ctrl+Arrows in terminal</title>
                <description>&lt;p&gt;Basically every program with some kind of input field supports &lt;code&gt;Ctrl+Arrows&lt;/code&gt; for skipping over words,
&lt;code&gt;Ctrl+Backspace&lt;/code&gt;, &lt;code&gt;Ctrl+Del&lt;/code&gt; for deleting words, &lt;code&gt;Ctrl+Shift+Delete&lt;/code&gt; for deleting rest of the line, etc.&lt;/p&gt;
&lt;p&gt;Terminal emulators, on the other hand…&lt;/p&gt;
&lt;p&gt;We could go to great lengths explaining reasons, history of vt100, etc… But the reality is that even when you&#39;re not particularly fond of GUI apps, you probably use at least a web browser and you likely have these shortcuts engraved into your muscle memory anyway.&lt;/p&gt;
&lt;p&gt;Of course, you can use &lt;code&gt;Alt+Arrow&lt;/code&gt; and other &lt;a href=&#34;https://readline.kablamo.org/emacs.html&#34;&gt;very powerful&lt;/a&gt; &lt;code&gt;readline&lt;/code&gt; bindings, but that means learning
whole new, &lt;a href=&#34;https://clementc.github.io/blog/2018/01/25/moving_cli/&#34;&gt;quite esoteric set of shortcuts for rather basic things&lt;/a&gt; like moving around and deleting text.&lt;/p&gt;
&lt;p&gt;So, if you want to join me in spitting on the VT100&#39;s grave </description>
                <pubDate>Tue, 21 May 2019 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2019/05/21/ctrl-arrows-in-terminal.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2019/05/21/ctrl-arrows-in-terminal.html</guid>
            </item>
        
            <item>
                <title>New webpage</title>
                <description>&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;My name is Hellricer.&lt;/p&gt;
&lt;p&gt;This blog will serve as a place to talk about my experiences with terminals and terminal-based programs, great software I&#39;ve found, tricks &amp;amp; tips for making your time in terminal more enjoyable, “ricing” and GNU/Linux in general.&lt;/p&gt;
&lt;p&gt;Most posts will revolve around programs like &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;tmux&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt; and so on.&lt;/p&gt;
&lt;h1&gt;About this website&lt;/h1&gt;
&lt;p&gt;This website is based on Jekyll and uses modified version of &lt;a href=&#34;https://github.com/mmistakes/so-simple-theme&#34;&gt;so-simple-theme&lt;/a&gt;, but I&#39;m using &lt;a href=&#34;http://obraz.pirx.ru&#34;&gt;Obraz&lt;/a&gt; for generating it.&lt;/p&gt;
&lt;p&gt;It aims to be modern-looking and responsive, while still being tiny (~1MB) and usable even in terminal-based browsers like &lt;code&gt;w3m&lt;/code&gt;, &lt;code&gt;lynx&lt;/code&gt; or &lt;code&gt;elinks&lt;/code&gt; (pictured below).&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&#34;https://hellricer.github.io//assets/images/editing-webpage.png&#34;&gt;&lt;img src=&#34;https://hellricer.github.io//assets/images/editin</description>
                <pubDate>Mon, 20 May 2019 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2019/05/20/new-webpage.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2019/05/20/new-webpage.html</guid>
            </item>
        
            <item>
                <title>Genes in Middle-earth</title>
                <description>&lt;p&gt;&lt;em&gt;...one script to find them all,
and into GEDCOM bind them...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ever since I was a child, Middle-earth was a special place for me.  Out of all the imaginary places invented for the entertainment, &lt;em&gt;Arda&lt;/em&gt; is arguably the most complex one.  The amount of information that accompanies the stories is overwhelming.  Tolkien is known to be genius linguist - languages of his world evolve in time, fork into dialects and influence each other.  But his sense for geography and history is just as incredible.  There are more than 70 kingdoms with several hundreds of people documented at least to some extent.  Some can be find in family trees printed in appendices of the books, some family relations are only mentioned in stories, but there&#39;s lot of them.  So, how about we map them?&lt;/p&gt;
&lt;p&gt;I&#39;m obviously not the first one to think of digitalizing Tolkien&#39;s genealogies.  &lt;a href=&#34;http://www.minastirith.com/cgi-bin/ultimatebb.cgi?ubb=get_topic;f=1;t=000070&#34;&gt;There are&lt;/a&gt; some ancien</description>
                <pubDate>Thu, 30 Apr 2015 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2015/04/30/genes-in-middle-earth.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2015/04/30/genes-in-middle-earth.html</guid>
            </item>
        
            <item>
                <title>Color me impressed</title>
                <description>&lt;p&gt;I&#39;m crazy about colors.&lt;/p&gt;
&lt;p&gt;I work with terminal emulators all the time and nothings is more deterrent to
me than big wall of black &amp;amp; white text spitted out into my 300x100 terminal.&lt;/p&gt;
&lt;p&gt;I want my errors red and successes green, I want numbers, URLs and paths pop
out from the rest of the text, I want colored logs, compiler outputs, source
code snippets... It really makes your terminal experience much more fun.&lt;/p&gt;
&lt;p&gt;So let&#39;s take a look where my obsession brought me so far.&lt;/p&gt;
&lt;h2&gt;Brief history&lt;/h2&gt;
&lt;p&gt;In the late 70s, the number of character-oriented terminals was rapidly
expanding. Of course there was no &#34;de jure&#34; standard and each manufacturer
handled their &lt;a href=&#34;http://en.wikipedia.org/wiki/Escape_sequence&#34;&gt;escape sequences&lt;/a&gt;
differently. That meant that every screen-handling program had to be written
for one (type of) terminal only.&lt;/p&gt;
&lt;p&gt;To deal with these incompatibilities, Bill Joy foresightedly created the
&lt;code&gt;termcap&lt;/code&gt; library (&lt;strong&gt;term&lt;/strong</description>
                <pubDate>Wed, 08 Oct 2014 00:00:00 </pubDate>
                <link>https://hellricer.github.io/2014/10/08/color-me-impressed.html</link>
                <guid isPermaLink="true">https://hellricer.github.io/2014/10/08/color-me-impressed.html</guid>
            </item>
        
    </channel>
</rss>